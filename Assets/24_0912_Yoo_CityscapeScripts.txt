//1. PlayerScript.cs

using UnityEngine;

public class PlayerScript : MonoBehaviour
{
    public float moveSpeed = 3f; // 이동 속도 / Movement speed
    public float flyForce = 1f; // 상승 힘 / Fly force
    private Rigidbody2D rb; // 리지드바디 컴포넌트 / Rigidbody2D component
    private SpriteRenderer spriteRenderer; // 스프라이트 렌더러 컴포넌트 / SpriteRenderer component

    public Sprite Player; // 기본 플레이어 스프라이트 / Default player sprite
    public Sprite PlayerHitOnce; // 첫 번째 충돌 후 스프라이트 / Sprite after first collision
    public Sprite PlayerHitTwice; // 두 번째 충돌 후 스프라이트 / Sprite after second collision

    private int hitCount = 0; // 충돌 횟수 / Collision count
    private LogicScript logic; // 로직 스크립트 / LogicScript

    // Start is called before the first frame update
    // 게임 시작 시 호출되는 메서드입니다 / Method called at the start of the game
    void Start()
    {
        rb = GetComponent<Rigidbody2D>();
        spriteRenderer = GetComponent<SpriteRenderer>();

        // LogicManager 태그가 있는 오브젝트를 찾아 LogicScript 컴포넌트에 연결 / Find the object with LogicManager tag and connect to the LogicScript component
        logic = GameObject.FindGameObjectWithTag("LogicManager").GetComponent<LogicScript>();

        rb.gravityScale = 1f;
    }

    // Update is called once per frame
    // 매 프레임마다 호출되는 메서드입니다 / Method called every frame
    void Update()
    {
        // 위/아래 방향키 입력 처리 / Handling up/down arrow key input
        if (Input.GetKey(KeyCode.UpArrow))
        {
            rb.velocity = new Vector2(rb.velocity.x, flyForce);
        }
        else if (Input.GetKey(KeyCode.DownArrow))
        {
            rb.velocity = new Vector2(rb.velocity.x, -flyForce);
        }

        // 좌/우 방향키 입력 처리 / Handling left/right arrow key input
        if (Input.GetKey(KeyCode.LeftArrow))
        {
            rb.velocity = new Vector2(-moveSpeed, rb.velocity.y);
        }
        else if (Input.GetKey(KeyCode.RightArrow))
        {
            rb.velocity = new Vector2(moveSpeed, rb.velocity.y);
        }
    }

    // 장애물과의 충돌 처리 / Handling collision with obstacles
    void OnCollisionEnter2D(Collision2D collision)
    {
        if (collision.gameObject.CompareTag("Obstacle"))
        {
            hitCount++;
            UpdatePlayerSprite();

            if (hitCount >= 3)
            {
                Debug.Log("Game Over");
                // 게임 오버 처리 / Trigger game over
                logic.GameOver();
            }
        }
    }

    // 충돌 횟수에 따라 플레이어 스프라이트 업데이트 / Update player sprite based on collision count
    void UpdatePlayerSprite()
    {
        if (hitCount == 1)
        {
            spriteRenderer.sprite = PlayerHitOnce;
        }
        else if (hitCount == 2)
        {
            spriteRenderer.sprite = PlayerHitTwice;
        }
    }
}




//2.BuildingMovement.cs

using UnityEngine;

public class BuildingMovement : MonoBehaviour
{
    public float moveSpeed = 2f;  // 이동 속도 // Speed at which the building moves

    void Update()
    {
        // 오른쪽으로 이동 // Move the building to the right
        transform.Translate(Vector2.right * moveSpeed * Time.deltaTime);

        // 장애물이 화면의 오른쪽 끝을 완전히 벗어난 후 제거 // Destroy the building after it goes off the right side of the screen
        if (transform.position.x > Camera.main.ViewportToWorldPoint(new Vector2(1, 0)).x + GetComponent<SpriteRenderer>().bounds.size.x)
        {
            Destroy(gameObject);
        }
    }
}


//3.BuildingSpawner.cs

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class BuildingSpawner : MonoBehaviour
{
    public GameObject cityScapePrefab;  // 파노라마 이미지 프리팹 // The cityscape image prefab
    public float spawnRate = 2f;        // 장애물 생성 간격 // Interval between spawns
    private float timer = 0f;           // 스폰 타이머 // Timer to track spawn intervals
    public float heightOffset = 0f;     // Y 위치 오프셋 (필요에 따라 조정) // Y position (I'll have to adjust as needed)

    void Start()
    {
        // 초기 스폰 // Initial spawn of the building
        SpawnBuilding();
    }

    void Update()
    {
        // 타이머 증가 // Increase the timer
        timer += Time.deltaTime;

        // 일정 시간이 지나면 새로운 장애물 스폰 // Spawn a new building after the timer reaches the spawn rate
        if (timer >= spawnRate)
        {
            SpawnBuilding();
            timer = 0f; // 타이머 초기화 // Reset the timer
        }
    }

    void SpawnBuilding()
    {
        // 스프라이트 높이 계산 // Calculate the height of the sprite
        float screenHeight = Camera.main.orthographicSize * 2f;
        float spawnYPosition = -screenHeight / 2f + heightOffset; // 바닥에 맞추기 위한 오프셋 추가 // Adjust the Y position to align with the bottom

        // 스프라이트 너비 계산 // Calculate the width of the sprite
        float buildingWidth = cityScapePrefab.GetComponent<SpriteRenderer>().bounds.size.x;

        // 화면 왼쪽 바깥에서 스폰 // Spawn the building off-screen to the left
        Vector2 spawnPosition = new Vector2(Camera.main.ViewportToWorldPoint(new Vector3(0, 0, 0)).x - buildingWidth, spawnYPosition);
        Instantiate(cityScapePrefab, spawnPosition, Quaternion.identity);
    }
}

//4.BuildingSetPassScript.cs

using UnityEngine;

public class BuildingSetPassScript : MonoBehaviour
{
    private LogicScript logic;

    // Start is called before the first frame update
    // 게임 시작 시 호출되는 메서드입니다 / Method called at the start of the game
    void Start()
    {
        // LogicManager 태그가 있는 오브젝트를 찾아 LogicScript 컴포넌트에 연결 / Find the object with LogicManager tag and connect to the LogicScript component
        logic = GameObject.FindGameObjectWithTag("LogicManager").GetComponent<LogicScript>();
    }

    // 플레이어가 빌딩 세트를 통과할 때 호출되는 메서드입니다 / Method called when the player passes the building set
    void OnTriggerEnter2D(Collider2D collision)
    {
        if (collision.gameObject.CompareTag("Player"))
        {
            // 1점 추가 / Add 1 point
            logic.AddScore(1);
        }
    }
}



//5.LogicScript

using UnityEngine;
using UnityEngine.SceneManagement;

public class LogicScript : MonoBehaviour
{
    public int playerScore = 0;
    public GameObject gameOverScreen;
    public UnityEngine.UI.Text scoreText;  // 점수 표시를 위한 UI 텍스트 //UI Text for scores

    [ContextMenu("Add Score")]
    public void AddScore(int scoreToAdd)
    {
        playerScore += scoreToAdd;
        scoreText.text = playerScore.ToString();
    }

    [ContextMenu("Trigger Game Over")]
    public void GameOver()
    {
        gameOverScreen.SetActive(true);
        Debug.Log("Game Over");
    }

    [ContextMenu("Restart Game")]
    public void RestartGame()
    {
        SceneManager.LoadScene(SceneManager.GetActiveScene().name);
    }
}
